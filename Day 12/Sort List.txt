class Solution {
public:
    ListNode *Mid(ListNode *head){
        ListNode *slow=head;
        ListNode *fast=head;
        
        while(fast->next!=NULL && fast->next->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }
    
    
    ListNode *mergeSortedlist(ListNode *p1, ListNode *p2){
        if(p1==NULL || p2==NULL)
            return (p1==NULL) ? p2:p1;
        ListNode *ans=new ListNode (0);
        ListNode *curr=ans;
        
        while(p1!=NULL && p2!=NULL){
            if(p1->val<p2->val){
                curr->next=p1;
                p1=p1->next;
            }
            else{
                curr->next=p2;
                p2=p2->next;
            }
            curr=curr->next;
        }
        curr->next=(p1!=NULL) ? p1:p2;
        return ans->next;
    }
    
    ListNode* sortList(ListNode* head) {
        if(head==NULL || head->next==NULL)
            return head;
        ListNode *mid=Mid(head);
        ListNode *newhead=mid->next;
        mid->next=NULL;
        
        ListNode *lefthalf=sortList(head);
        ListNode *righthalf=sortList(newhead);
        
        return mergeSortedlist(lefthalf,righthalf);
    }
};