class Solution {
public:
    int solveWordWrap(vector<int>nums, int k) 
    { 
        int n = nums.size();
        vector<vector<int>> extras(n, vector<int>(n, 0));
        vector<vector<int>> dp(n, vector<int>(n, 0));
        vector<int> minCost(n, INT_MAX);
        vector<int> result(n, 0);

        for (int i = 0; i < n; i++) {
            extras[i][i] = k - nums[i];
            for (int j = i + 1; j < n; j++) {
                extras[i][j] = extras[i][j - 1] - nums[j] - 1;
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (extras[i][j] < 0)
                    dp[i][j] = INT_MAX;
                else if (j == n - 1 && extras[i][j] >= 0)
                    dp[i][j] = 0;
                else
                    dp[i][j] = extras[i][j] * extras[i][j];
            }
        }

        for (int i = n - 1; i >= 0; i--) {
            for (int j = n - 1; j >= i; j--) {
                if (dp[i][j] != INT_MAX && (j + 1 < n ? minCost[j + 1] : 0) != INT_MAX) {
                    int cost = dp[i][j] + (j + 1 < n ? minCost[j + 1] : 0);
                    if (cost < minCost[i]) {
                        minCost[i] = cost;
                        result[i] = j + 1;
                    }
                }
            }
        }

        return minCost[0];
    } 
};